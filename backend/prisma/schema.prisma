// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Player {
  id                 Int      @id @default(autoincrement())
  username           String   @unique
  intra_username     String   @default("username")
  avatar_url         String   @default("default_avatar.png")
  avatar             Bytes?
  two_factor_enabled Boolean  @default(false)
  player_stats       PlayerStats?  @relation("player_stats")

  owner_of           Channel[]
  member_of          ChannelMember[]
  sent_messages      ChatMessage[]
  matches_played     Match[]            @relation("matches_played")
  matches_con        Match[]            @relation("matches_con")
  blocked_players    BlockedPlayer[]    @relation("blocked_players")
  blocked_by         BlockedPlayer[]    @relation("blocked_by")
  friends            Friend[]           @relation("friends")
  friends_con        Friend[]           @relation("friends_con")
  sent_invitations   GameInvitation[]   @relation("sent_invitations")
  recv_invitations   GameInvitation[]   @relation("recv_invitations")
}

model PlayerStats {
  id            Int      @id @unique
  wins          Int      @default(0)
  losses        Int      @default(0)
  ladder_level  Int      @default(1)
  achievements  Json?
  status        PlayerStatus

  player        Player   @relation("player_stats", fields: [id], references: [id], onDelete: Cascade)
}

enum PlayerStatus {
  online
  offline
  in_game
}

model Channel {
  id         Int      @id @default(autoincrement())
  name       String
  password   String?
  is_private Boolean  @default(false)

  owner_id   Int
  owner      Player   @relation(fields: [owner_id], references: [id])

  messages   ChatMessage[]
  members    ChannelMember[]
}

model ChannelMember {
  id         Int      @id @default(autoincrement())
  member_id  Int
  member     Player   @relation(fields: [member_id], references: [id])

  channel_id Int
  channel    Channel @relation(fields: [channel_id], references: [id])

  is_admin   Boolean @default(false)
  is_muted   Boolean @default(false)
  is_banned  Boolean @default(false)
  added_at   DateTime
  muted_at   DateTime?
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  content    String
  sender_id  Int
  channel_id Int
  sent_at    DateTime
  sender     Player  @relation(fields: [sender_id], references: [id])
  channel    Channel @relation(fields: [channel_id], references: [id])
}

model Match {
  id              Int      @id @default(autoincrement())
  player_id       Int
  player          Player  @relation("matches_played", fields: [player_id], references: [id])

  opponent_id     Int
  opponent        Player  @relation("matches_con", fields: [opponent_id], references: [id])

  player_points   Int      @default(0)
  opponent_points Int      @default(0)
  timestamp       DateTime
}

model BlockedPlayer {
  id          Int     @id @default(autoincrement())

  player_id   Int
  player      Player  @relation("blocked_players", fields: [player_id], references: [id])

  blocked_id  Int
  blocked     Player  @relation("blocked_by", fields: [blocked_id], references: [id])
}

model Friend {
  id          Int     @id @default(autoincrement())

  player_id   Int
  player      Player  @relation("friends", fields: [player_id], references: [id])

  friend_id   Int
  friend      Player  @relation("friends_con", fields: [friend_id], references: [id])
}

model GameInvitation {
  id           Int      @id @default(autoincrement())
  sender_id    Int
  recipient_id Int
  timestamp    DateTime
  accepted     Boolean  @default(false)

  sender       Player   @relation("sent_invitations", fields: [sender_id], references: [id])
  recipient    Player   @relation("recv_invitations", fields: [recipient_id], references: [id])
}
